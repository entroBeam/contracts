{
	"compiler": {
		"version": "0.8.9+commit.e5eed63a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					}
				],
				"name": "PRBMathUD60x18__FromUintOverflow",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "prod1",
						"type": "uint256"
					}
				],
				"name": "PRBMath__MulDivFixedPointOverflow",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "prod1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "denominator",
						"type": "uint256"
					}
				],
				"name": "PRBMath__MulDivOverflow",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousAdmin",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newAdmin",
						"type": "address"
					}
				],
				"name": "AdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_moduloAssigned_EntropyChain_",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_RecentRevealEntropyNumber_",
						"type": "uint256"
					}
				],
				"name": "Assigned_EntropyChain_number",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beacon",
						"type": "address"
					}
				],
				"name": "BeaconUpgraded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "Contract_Reveal_Entropy",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "F_fallback",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"name": "F_receive",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "Upgraded",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "AllocationInterval",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Array_EntropyChain",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "entropyByUsers",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "entropyByBlockNumber",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "SourceAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "leftgas",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Assigned_EntropyChain",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "Assigned_EntropyChain_length",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "DonationWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_usersHexData",
						"type": "bytes32"
					}
				],
				"name": "EntropyByUsers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FormationNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "InitToken",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "RecentRevealEntropyNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_blockTargerTime",
						"type": "uint256"
					}
				],
				"name": "SetAllocationInterval",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_upcomingRevealBlockNo",
						"type": "uint256"
					}
				],
				"name": "SetUpcomingRevealBlockNo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creationEpoch",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_a",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_b",
						"type": "bytes32"
					}
				],
				"name": "keccak256Test",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "medianAvg_mod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "minMaxAvr",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numberLatestUsersEntropy",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardsPerBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_InitToken",
						"type": "uint256"
					}
				],
				"name": "setInitToken",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_a",
						"type": "uint256"
					}
				],
				"name": "set_FormationNumber",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "struct_EntropyRegister_ID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "usersEntropy",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "verifyDuplicate",
						"type": "bool"
					},
					{
						"internalType": "bytes32",
						"name": "revealEntropy",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "struct_accountTxCount_ID",
				"outputs": [
					{
						"internalType": "address",
						"name": "accountAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "A_counting",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "struct_block_ID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "blockCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "upcomingRevealBlockNo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "upgradeToAndCall",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"Assigned_EntropyChain_number(uint256,uint256)": {
					"details": "It records which users' entropy is mixed as a seed to generate reliable entropy. The actual number in '_RecentRevealEntropyNumber_' should apply -1. The numeral of '_moduloAssigned_EntropyChain_' is the numeral of elements in the Array_EntropyChain array."
				},
				"Contract_Reveal_Entropy(bytes32)": {
					"details": "Confusion arises when many events are logged in one Tx. Each event is recorded only once per transaction. This is why Contracts does not reveal EntropyChain all at once."
				}
			},
			"kind": "dev",
			"methods": {
				"EntropyByUsers(bytes32)": {
					"details": "can be inherited and used, and when the reveal is completed, the token is transfer to the user, and at the same time, the reveal entropy is stored in 'struct_EntropyRegister.revealEntropy'. Caveats: - Depending on the state of the network, the number of contract participants, and the internal state of the contract,   the gas fee required varies each time. - If multiple Tx are generate with the same gas fee, transaction is revert to out of gas. Requirements: - The same '_usersHexData' (Entropy seed) will be reverted.",
					"params": {
						"_usersHexData": "256bits hexadecimal string specified by the user. duplicate values are reverted."
					}
				},
				"SetAllocationInterval(uint256)": {
					"params": {
						"_blockTargerTime": "average value of block Target Time"
					}
				},
				"SetUpcomingRevealBlockNo(uint256)": {
					"params": {
						"_upcomingRevealBlockNo": "New upcomingRevealBlockNo Number"
					}
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"keccak256Test(bytes32,bytes32)": {
					"details": "Separate function to check keccack256"
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"rewardsPerBlock()": {
					"details": "EntroBeam includes a design to prevent overflow, but please be careful if anyone else devs do anything with this contract code.If you need to change a formula, you must design it carefully for overflow. Even sometimes, the process overflows, but the result does not overflow."
				},
				"setInitToken(uint256)": {
					"details": "InitToken has already been assigned to 30000000 in function initialize(). Nevertheless, changes may be made in the future if there is a compelling reason to do so."
				},
				"set_FormationNumber(uint256)": {
					"params": {
						"_a": "Specify an integer"
					}
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"upgradeTo(address)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				},
				"upgradeToAndCall(address,bytes)": {
					"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
				}
			},
			"stateVariables": {
				"AllocationInterval": {
					"details": "Block Target Time. It is an integer-type unit of seconds, and when the Block Target Time of the Network is changed, this value will also change. refer to 'rewardsPerBlock()'"
				},
				"Array_toBeMedian": {
					"details": "gas fee array of 'Assigned_EntropyChain' set as 'FormationNumber'."
				},
				"Assigned_EntropyChain": {
					"details": "Select and push the ones that become FormationNumber in Array_EntropyChain. The settle(reveal) number is immediately move and delete by pop. The value drawn from 'Assigned_EntropyChain' is combined with 'RecentRevealEntropyNumber - 1' to become contractEntropy."
				},
				"Assigned_EntropyChain_length": {
					"details": "When 'Assigned_EntropyChain_length' and 'FormationNumber' are the same and Tx of 'EntroRegister' becomes +1, the average and median values are calculated, and entropy is drawn lots from 'EntroRegister' and mixed with the entropy of 'RecentRevealEntropyNumber'. The EntropyRegister that started these processes is not included in the Entropychain. In other words, the latest transaction that generated entropy seed cannot be combined with EntropyRegister. When the Entropy of the Contract is Revealed, the 'FormationNumber' element is deleted, and the 'Assigned_EntropyChain' element is added, so the two values always match. However, if the contract has just been created or the value of 'FormationNumber' increases, revealEntropy will not occur until 'FormationNumber' is filled. So 'Assigned_EntropyChain_length' is useful when comparing length with 'FormationNumber'."
				},
				"FormationNumber": {
					"details": "The number of elements of 'Assigned_EntropyChain.length'. This value is only increased and only even numbers are allowed to improve the reliability of the median. The reveal process is generate at 'FormationNumber +1'. EntroChain's Reveal process works at +1 Block even if the 'FormationNumber' is full. Therefore, even if an  EntroRegister transaction exceeding 'FormationNumber' occurs in one block, the Reveal process does not work because  it is not +1 Block. In this case, 'Assigned_EntropyChain' is exceeded, but this is the intended process. It's completely normal."
				},
				"InitToken": {
					"details": "Annual token supply. It is calculated based on the epoch, it is a very close approximation. Supply continues to decrease each year. refer to 'rewardsPerBlock()'"
				},
				"RecentRevealEntropyNumber": {
					"details": "The actual user number be -1 from this variable. A sequence number that has not been settled(revealed) yet. The value drawn from 'Assigned_EntropyChain' is combined with 'RecentRevealEntropyNumber - 1' to become contract reveal entropy."
				},
				"creationEpoch": {
					"details": "Contract Create Unix-time. use to calculate the token distribution amount."
				},
				"medianAvg_mod": {
					"details": "modulo values used in EntropyChain are used in the probability distribution model to be upgraded to Phase2 together with Register/Chain. If the modulo values do not fit into the probability distribution, Phase2 will not use the modulo"
				},
				"minMaxAvr": {
					"details": "array for checking the probability distribution model."
				},
				"numberLatestUsersEntropy": {
					"details": "total number of entropy sent by the user. Matches the array number in 'Array_EntropyChain'"
				},
				"upcomingRevealBlockNo": {
					"details": "Even if 'FormationNumber' is filled, Reveal occurs only when a transaction occurs in a future block that is  ahead of the block number of the Entropy Register to be Revealed by 'upcomingRevealBlockNo' + 1 blockNumber."
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"PRBMathUD60x18__FromUintOverflow(uint256)": [
					{
						"notice": "Emitted when converting a basic integer to the fixed-point format format overflows UD60x18."
					}
				],
				"PRBMath__MulDivFixedPointOverflow(uint256)": [
					{
						"notice": "Emitted when the result overflows uint256."
					}
				],
				"PRBMath__MulDivOverflow(uint256,uint256)": [
					{
						"notice": "Emitted when the result overflows uint256."
					}
				]
			},
			"events": {
				"Contract_Reveal_Entropy(bytes32)": {
					"notice": "same as struct_EntropyRegister.revealEntropy"
				}
			},
			"kind": "user",
			"methods": {
				"Array_EntropyChain(uint256)": {
					"notice": "'struct_EntropyChain' is used not mapping, used only as an array, and forms a chain with the median and average of the gas fee. Array_EntropyChain sequentially assigns numbers to transactions that have successfully executed EntropyRegister. Number 1 is assigned to the Tx that first generated Tx since the contract was created. And it is sequentially increase 2,3,4.... 'numberLatestUsersEntropy' == 'Array_EntropyChain'"
				},
				"DonationWithdraw(address,uint256)": {
					"notice": "This contract has no fund distribution function other than the distribution of EntroBeam tokens, which are rewarded to users who create transactions on EntroBeam's EntroRegister and EntroChain. Users do not need and have no reason to transfer funds to this contract under any circumstances. Nevertheless, if the user sends funds to the contract, the funds are treated as donations. Thus, this function performs the function of withdrawing donations."
				},
				"EntropyByUsers(bytes32)": {
					"notice": "The entropy seed sent by the user is transmitted to EntroBeam and stored in the Entropy register. Even a small noise in the gas fee will affect the median and average values of the entropy chain. - Data and gas fee of each transaction is aggregate as much as 'FormationNumber'. Therefore, as the value of  'FormationNumber' increases, entropy reliability increase proportionally."
				},
				"SetAllocationInterval(uint256)": {
					"notice": "Block Chain’s Block Target Time may be change in the future. If the target time is changed, this value must also be changed."
				},
				"SetUpcomingRevealBlockNo(uint256)": {
					"notice": "As 'upcomingRevealBlockNo' increases along with 'FormationNumber', the unpredictability of the entropy  chain increases."
				},
				"initialize()": {
					"notice": "initialize is upgradeable_ERC20 constroctor"
				},
				"rewardsPerBlock()": {
					"notice": "Calculate token rewards per block. Divide rewardPerYear() by 3153600 seconds (one year). And multiply that value by Block Target Time. The Gregorian calendar is 31556952 sec, the Julian year is 31557600 sec, and the leap year is 31622400 sec This contract sets the reward based on 31536000 seconds per year."
				},
				"set_FormationNumber(uint256)": {
					"notice": "Change the value of 'FormationNumber'. This value is only incremented"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"EntroBeam_main.sol": "EntroBeam"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable@4.3.0/access/OwnableUpgradeable.sol": {
			"keccak256": "0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa",
			"license": "MIT",
			"urls": [
				"bzz-raw://4dd39ae44599da9e6b59035de3cddcfaa8d7b2a45f1c887adf5a1e38315cf6cd",
				"dweb:/ipfs/QmcFVkc7m3MzxoiCWCb2yZuezqW7eQTEvnScNALXhdsyJu"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
			"keccak256": "0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7831b612db9847586663c82a3d071429520fc5c4ee1a15cb7873ebf15baa42d",
				"dweb:/ipfs/Qmezw3xDRDjm2by9rmNLa575CvqTWBoEMSdimp5nWd9ZfZ"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/proxy/beacon/IBeaconUpgradeable.sol": {
			"keccak256": "0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54",
			"license": "MIT",
			"urls": [
				"bzz-raw://429b36651fab917b4cdfa5e9431b96c5bd3ba73392a31e62a4d92b4b4ae85184",
				"dweb:/ipfs/QmY1SgWuSbxgYCPAibNHT4phA71QzzqagZRunwC7Gm19wq"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/proxy/utils/Initializable.sol": {
			"keccak256": "0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9",
			"license": "MIT",
			"urls": [
				"bzz-raw://fe9fa1beb63e4a09637701f783982ba80380d630d600c9cafe26b68bf58be1b2",
				"dweb:/ipfs/QmRA3GXhTWys88joD9x8xYhdjzvGwmDGLMMzGw3LxbSEge"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/proxy/utils/UUPSUpgradeable.sol": {
			"keccak256": "0x57e153cdc803037ecf68a916c6d7eb38d7e4ddbc7ceb6e37c0bee45a5aef9709",
			"license": "MIT",
			"urls": [
				"bzz-raw://a63838ebf237b9b8e0defe37c091cac1d5f9f41515edda31f01b6b04369ba783",
				"dweb:/ipfs/QmXvEJKHP2o8rfp6ahHhXdF5LyQtGM5r31Z5k4i8sfyv2a"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/token/ERC20/ERC20Upgradeable.sol": {
			"keccak256": "0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6",
			"license": "MIT",
			"urls": [
				"bzz-raw://7373c505e45d8c4c204a7a59837efa39003b305e1a1f2690849694fec928ce27",
				"dweb:/ipfs/QmSmELVaAzb9a167vfGKqpAfjbws36AkvsZ45FaSThKgDL"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5ec4671e17a3a805bc75e989180616001f5fad2043da849e9e8c1dae2805ed3",
				"dweb:/ipfs/QmeVryqLgUYRDJhFgv957unYkEg8pqNENsUZnmvm176Fno"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
			"keccak256": "0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd",
			"license": "MIT",
			"urls": [
				"bzz-raw://91e63b32b515ec23a00d2370e838079bc94093524435b08e41cda6725d827470",
				"dweb:/ipfs/Qmdji5aKmdbLq26sGFXFko5PQUtokdJPT23QtKVGKsX9mw"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/utils/AddressUpgradeable.sol": {
			"keccak256": "0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7",
			"license": "MIT",
			"urls": [
				"bzz-raw://3b80d20ed113ad0be486d489e1cc2f0f4006b7893e579c2156e8c434d8eec382",
				"dweb:/ipfs/QmdB8QGghkRGcSkp4xAWCvohGgYXFU9ncMx82XSqDMiZJf"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/utils/ContextUpgradeable.sol": {
			"keccak256": "0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3c8b4ec819fc9648ef5ae6b8edc474b2a631389fa73add4c4545e1918abe034",
				"dweb:/ipfs/Qmc8GzvTtCxR3mg3QuLRzycSMfsSjjZPyPALmLBjMxSGv6"
			]
		},
		"@openzeppelin/contracts-upgradeable@4.3.0/utils/StorageSlotUpgradeable.sol": {
			"keccak256": "0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f270653fd8d1a109e3e3aa77d5035a52f175b66604f924e0db1f71a5b38e708",
				"dweb:/ipfs/QmNiP7PvV47ahSvMwxCifeUExVNhyVXdd8Zu2hGz4XC32j"
			]
		},
		"EntroBeam_main.sol": {
			"keccak256": "0x5a4d37f1c7378b12962f58f7ac7c354e587ca458eb54d33cd5be1d3622109a38",
			"license": "MIT",
			"urls": [
				"bzz-raw://c12d72695314d26c211fa5ced45c813da250876307f5779e86fa42c2c8f7816d",
				"dweb:/ipfs/QmNgg6SqwVRQUiZBsxJCjQRkhUjb5hpbeQTiWF9g1DrxPL"
			]
		},
		"https://raw.githubusercontent.com/LeonWesker/prb-math/main/contracts/PRBMath.sol": {
			"keccak256": "0x3c15c9f8e412b7e0794f69910bc0bdb003fcfcc573dcd901446a607fc0649c22",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://d31cacca29f30d618ab5e544ece9cd78b9330aefac9deb7a80ca53465078c4fe",
				"dweb:/ipfs/QmdmZK3aRRrBGxf1v2MxWty4ydUHyNzVt5bTL13KmuS3Jw"
			]
		},
		"https://raw.githubusercontent.com/LeonWesker/prb-math/main/contracts/PRBMathSD59x18.sol": {
			"keccak256": "0xa1921a115901f3c955ea25b0a98e20d67187c8be962abb32ee501d1de57ccc2c",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://828bb51fcd96ccd069899b5980f74474ae9680e554c66e9531ea8c633da3c52b",
				"dweb:/ipfs/QmeqhAZ8H4ZFNrA8HeE9PrMTbL9cUuGh1CfZDs1Li2dLWg"
			]
		},
		"https://raw.githubusercontent.com/LeonWesker/prb-math/main/contracts/PRBMathSD59x18Typed.sol": {
			"keccak256": "0x30358066241850bcdd2e0d67b1234cc99bfa5b4f6baead5b9903b1dcc6a2abf1",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://fcfe99d021c53975f6fd75e0e34c03bd8a583e21f2459aa48babf518889a8c31",
				"dweb:/ipfs/Qma66AVzr9vvHzaR2itMo59E3ZmqjLG7Mex6aj1bvmt7CN"
			]
		},
		"https://raw.githubusercontent.com/LeonWesker/prb-math/main/contracts/PRBMathUD60x18.sol": {
			"keccak256": "0xf3174c698af7bb26d7eacc0163e798264fb94c91e4f0cf44bfaa3276551ecdf6",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://ffcb959ad69ab2f074aabbdc2997033c3f5eb2e29736096a5ba3447a14ba48bd",
				"dweb:/ipfs/Qmdu9kKic7UW78cr854PrwdufNnfg1y4d2pobDJYvJQfgM"
			]
		},
		"https://raw.githubusercontent.com/LeonWesker/prb-math/main/contracts/PRBMathUD60x18Typed.sol": {
			"keccak256": "0x6f21eb8c9625c818609d2d6d2d1d21341acc679c05b14be1aac00113977b87a2",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://950cdea426ab1d43631f62d35565d304a33cf41f1bcaac84e3356c35c0298bf6",
				"dweb:/ipfs/QmUvbjGT874fCBAx1bXcXetMzaLfLM313iVXQz8XJpqq5E"
			]
		}
	},
	"version": 1
}